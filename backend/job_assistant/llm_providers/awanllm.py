"""
TODO: clean file header description
Handles Awan LLM Api calls

Documentation: https://www.awanllm.com/docs




# TODO: Create prompt engineering for:
# CV/Job matching (CV = user_data generated by summarize_resume) / job = job title + level + skills associated
"""

import logging
import re
import requests
import json

from job_assistant.constants import (
    AWANLLM_SECRET_KEY,
)

######################## LOGGING CONFIGURATION ########################
LOGGER = logging.getLogger(__name__)
AWANLLM_API = "https://api.awanllm.com/v1/chat/completions"
MODEL = "Meta-Llama-3-8B-Instruct"
ROLE = "assistant"
HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {AWANLLM_SECRET_KEY}",
}


def get_response(prompt: str) -> str:
    """
    Get response from an AI model based on the provided prompt.

    Args:
        prompt (str): The prompt to be sent to the AI model.

    Returns:
        str: The response generated by the AI model.
    """
    payload = json.dumps(
        {"model": MODEL, "messages": [{"role": ROLE, "content": prompt}]}
    )

    response = requests.post(AWANLLM_API, headers=HEADERS, data=payload)
    json_data = response.json()
    clear_text = json_data["choices"][0]["message"]["content"]

    return clear_text


def summarize_resume(keywords: str) -> dict:
    """
    Summarizes a resume by sending a request to an API.

    Args:
        keywords (str): Text extracted from resume.

    Returns:
        dict: Extracted information from the resume in JSON format.
    """

    template = f"""
    As a smart recruiter assistant specialized in CV analysis.
    1) Analyse the following CV of an applicant
    2) Extract the most relevant skills, experience and education.
    4) Ignore all unnecessary details (e.g: phone number, email address, birthday)

    Extracted applicant information from its CV:
    {keywords}

    ---
    Do NOT explain your thinking process. Do not add additional informations and details
    Answer MUST be a Json format matching this template:
    {{
        "skills": {{
            "hard": [dev stack and technologies used],
            "soft": []
        }},
        "experience": {{
            "pro": [
                "experience1": [very brief list of tasks],
                ...,
                "experienceN": [very brief list of tasks]
            ],
            "perso": [
                "experience1": [very brief list of tasks],
                ...,
                "experienceN": [very brief list of tasks]
            ]
        }},
        "education": {{
            "university": "",
            "degrees": []
        }}
    }}
    """
    try:
        clear_text = get_response(template)
        LOGGER.debug("Response from API: %s", clear_text)

        pattern = r"```(.*?)```"
        matches = re.findall(pattern, clear_text, re.DOTALL)

        if matches:
            user_data = json.loads(matches[0])
        else:
            json_text = clear_text.split("JSON format:", 1)[-1].strip()
            user_data = json.loads(json_text)

        return user_data

    except json.JSONDecodeError as e:
        LOGGER.critical(
            f"The AI failed to return a proper JSON format. Error: {str(e)}"
        )
        raise json.JSONDecodeError(
            "The AI failed to return a proper JSON format", doc=clear_text, pos=0
        )

    except Exception as e:
        LOGGER.error(f"An error occurred while summarizing the resume. Error: {str(e)}")
        raise
